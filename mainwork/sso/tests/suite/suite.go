package suite

import (
	"context"
	"net"
	"sso/inter/config"
	"strconv"
	"testing"

	v1 "github.com/formangloria83/protos/gen/go/sso"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

const (
	grpcHost = "localhost"
)

type Suite struct {
	*testing.T
	Cfg        *config.Config // local yaml
	AuthClient v1.AuthClient  // grpc client
}

func New(t *testing.T) (context.Context, *Suite) {
	t.Helper()   // forming stack so func wont be final
	t.Parallel() // can be parallel

	cfg := config.MustLoadByPath("F://sso//config//local.yaml")

	ctx, cancelCtx := context.WithTimeout(context.Background(), cfg.GRPC.Timeout) // must be for tests

	t.Cleanup(func() {
		t.Helper()
		cancelCtx()
	})

	cc, err := grpc.DialContext(context.Background(),
		grpcAdress(cfg),
		grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		t.Fatalf("GRPC server connection failed: %v", err)
	}

	return ctx, &Suite{
		T:          t,
		Cfg:        cfg,
		AuthClient: v1.NewAuthClient(cc), // autogenerated client
	}
}

func grpcAdress(cfg *config.Config) string {
	return net.JoinHostPort(grpcHost, strconv.Itoa(cfg.GRPC.Port))
}
